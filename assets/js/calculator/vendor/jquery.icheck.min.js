(function (b) {
  function m(a, b, d, c) { const e = a[0]; const l = a.parent(); let j = /disable|enable/.test(d) ? 'disabled' : 'checked'; const f = d == 'update' ? { checked: e.checked, disabled: e.disabled } : e[j]; if (/^check|disable/.test(d) && !f)n(a, !0, l, j); else if (/uncheck|enable/.test(d) && f)p(a, !0, l, j); else if (d == 'update') for (j in f)f[j] ? n(a, !1, l, j, c) : p(a, !1, l, j, c); else b || (!0 == d && !e.disabled && a.trigger('is.Clicked'), f ? n(a, !0, l, j) : p(a, !0, l, j)); } function n(a, k, d, c, e) {
    k && (a[0][c] = !0); !0 !== d.data(c) && (c == 'checked' && (a[0].type == 'radio' && a[0].name)
&& b(`input[name="${a[0].name}"]`).each(function () { this !== a[0] && b(this).data('icheck') && p(b(this), !0, b(this).parent(), c); }), (k || e) && a.trigger('is.Changed'), k && a.trigger(`is.${c.replace('di', 'Di').replace('ch', 'Ch')}`), d.data(c, !0).addClass(r(a, c)));
  } function p(a, b, d, c, e) { const l = c == 'disabled' ? 'Enabled' : 'Unchecked'; b && (a[0][c] = !1); !1 !== d.data(c) && ((b || e) && a.trigger('is.Changed'), b && a.trigger(`is.${l}`), d.data(c, !1).removeClass(r(a, c))); } function u(a, k) {
    if (a.data('icheck')) {
      const d = a[0].id; const c = b(`label[for=${d}]`);
      a.parent().html(a.attr('style', a.data('icheck').style || '').trigger(k || '')); a.removeData('icheck').unbind('.df').unwrap(); d && c.length && c.unbind('.df');
    }
  } function r(a, b) { if (a.data('icheck')) return a.data('icheck').options[`${b}Class`]; }b.fn.iCheck = function (a) {
    if (/^(check|uncheck|disable|enable|update|destroy)$/.test(a)) return this.each(function () { /destroy/.test(a) ? u(b(this), 'is.Destroyed') : m(b(this), !0, a); }); if (typeof a === 'object' || !a) {
      const k = navigator.userAgent; const d = b.extend({}, {
        checkboxClass: 'icheckbox',
        radioClass: 'iradio',
        checkedClass: 'checked',
        disabledClass: 'disabled',
        hoverClass: 'hover',
        focusClass: 'focus',
        activeClass: 'active',
        labelHover: !0,
        labelHoverClass: 'hover',
      }, a); const c = /^(checkbox|radio)$/.test(d.handle) ? `:${d.handle}` : ':checkbox, :radio'; let e = (`${d.increaseArea}`).replace('%', '') | 0; e < -50 && (e = -50); return this.each(function () {
        (b(this).is(c) ? b(this) : b(this).find(c)).each(function () {
          u(b(this)); const a = this; const c = a.id; var f = {
            position: 'absolute',
            top: `${-e}%`,
            left: `${-e}%`,
            display: 'block',
            width: `${100 + 2 * e}%`,
            height: `${100 + 2 * e}%`,
            margin: 0,
            padding: 0,
            background: '#fff',
            border: 0,
            opacity: 0,
          }; const r = /ipad|iphone|ipod|android|blackberry|windows phone|opera mini/i.test(k) ? { position: 'absolute', visibility: 'hidden' } : e | 0 ? f : { position: 'absolute', opacity: 0 }; const w = a.type == 'checkbox' ? d.checkboxClass : d.radioClass; const h = b(this).data('icheck', { style: b(this).attr('style'), options: d }).css(r); const q = b(`label[for=${c}]`); const g = h.wrap(`<div class="${w}"/>`).trigger('is.Created').parent().append(d.insert); var f = b('<ins/>').css(f).appendTo(g).click(() => { h.click(); m(h, !1, !0); }); const s = d.hoverClass;
          const t = d.labelHoverClass; let v; !0 == d.cursor && f.css('cursor', 'pointer'); !0 == d.inheritClass && g.addClass(a.className); !0 == d.inheritID && c && g.attr('id', `icheck-${c}`); g.css('position') == 'static' && g.css('position', 'relative'); m(h, !0, 'update'); c && q.length && q.bind('click.df mouseenter.df mouseleave.df touchbegin.df touchend.df', function (c) {
            const e = c.type; const f = b(this); e == 'click' ? (c.preventDefault(), h.click(), m(h, !1, !0)) : !0 == d.labelHover && !a.disabled && (/mouseenter|touchbegin/.test(e) ? (g.addClass(s), f.addClass(t)) : (g.removeClass(s),
            f.removeClass(t)));
          }); h.bind('focus.df blur.df keyup.df keydown.df keypress.df', (c) => { const b = c.type; let e = c.keyCode || c.charCode || c.which; c = /MSIE [5-8]/.test(k) ? b == 'keyup' && v !== 'keypress' : b == 'keyup'; e = b == 'keypress' && e == 32; /focus|blur/.test(b) ? b == 'focus' ? g.addClass(d.focusClass) : g.removeClass(d.focusClass) : a.type == 'radio' ? (c ? m(h, !0, 'update', !0) : e && !a.checked && n(h, !1, g, 'checked', !0), v = b) : a.type == 'checkbox' && e && (a.checked ? p(h, !1, g, 'checked', !0) : n(h, !1, g, 'checked', !0)); }); f.bind('mousedown mouseup mouseout mouseenter mouseleave touchbegin touchend',
            (b) => { b = b.type; const e = /mousedown|mouseup|mouseout/.test(b) ? d.activeClass : s; a.disabled || (/mousedown|mouseenter|touchbegin/.test(b) ? g.addClass(e) : g.removeClass(e), c && (q.length && !0 == d.labelHover && e == s) && (/mouseleave|touchend/.test(b) ? q.removeClass(t) : q.addClass(t))); });
        });
      });
    } return this;
  };
}(jQuery));